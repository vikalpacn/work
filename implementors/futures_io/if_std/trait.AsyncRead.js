(function() {var implementors = {
"diem_rate_limiter":[["impl&lt;T:&nbsp;AsyncRead&gt; AsyncRead for <a class=\"struct\" href=\"diem_rate_limiter/async_lib/struct.AsyncRateLimiter.html\" title=\"struct diem_rate_limiter::async_lib::AsyncRateLimiter\">AsyncRateLimiter</a>&lt;T&gt;"]],
"memsocket":[["impl AsyncRead for <a class=\"struct\" href=\"memsocket/struct.MemorySocket.html\" title=\"struct memsocket::MemorySocket\">MemorySocket</a>"]],
"netcore":[["impl AsyncRead for <a class=\"struct\" href=\"netcore/transport/tcp/struct.TcpSocket.html\" title=\"struct netcore::transport::tcp::TcpSocket\">TcpSocket</a>"]],
"network":[["impl&lt;TSocket&gt; AsyncRead for <a class=\"struct\" href=\"network/noise/stream/struct.NoiseStream.html\" title=\"struct network::noise::stream::NoiseStream\">NoiseStream</a>&lt;TSocket&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: AsyncRead + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,</span>"],["impl&lt;'a&gt; AsyncRead for <a class=\"struct\" href=\"network/testutils/fake_socket/struct.ReadOnlyTestSocket.html\" title=\"struct network::testutils::fake_socket::ReadOnlyTestSocket\">ReadOnlyTestSocket</a>&lt;'a&gt;"],["impl AsyncRead for <a class=\"struct\" href=\"network/testutils/fake_socket/struct.ReadOnlyTestSocketVec.html\" title=\"struct network::testutils::fake_socket::ReadOnlyTestSocketVec\">ReadOnlyTestSocketVec</a>"],["impl&lt;'a&gt; AsyncRead for <a class=\"struct\" href=\"network/testutils/fake_socket/struct.ReadWriteTestSocket.html\" title=\"struct network::testutils::fake_socket::ReadWriteTestSocket\">ReadWriteTestSocket</a>&lt;'a&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()